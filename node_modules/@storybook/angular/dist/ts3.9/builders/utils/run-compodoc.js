"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCompodoc = void 0;
var child_process_1 = require("child_process");
var rxjs_1 = require("rxjs");
var path = __importStar(require("path"));
var hasTsConfigArg = function (args) { return args.indexOf('-p') !== -1; };
// path.relative is necessary to workaround a compodoc issue with
// absolute paths on windows machines
var toRelativePath = function (pathToTsConfig) {
    return path.isAbsolute(pathToTsConfig) ? path.relative('.', pathToTsConfig) : pathToTsConfig;
};
exports.runCompodoc = function (_a, context) {
    var compodocArgs = _a.compodocArgs, tsconfig = _a.tsconfig;
    return new rxjs_1.Observable(function (observer) {
        var tsConfigPath = toRelativePath(tsconfig);
        var finalCompodocArgs = __spreadArrays([
            'compodoc'
        ], (hasTsConfigArg(compodocArgs) ? [] : ['-p', tsConfigPath]), [
            '-d',
            "" + context.workspaceRoot
        ], compodocArgs);
        try {
            context.logger.info(finalCompodocArgs.join(' '));
            var child = child_process_1.spawn('npx', finalCompodocArgs, {
                cwd: context.workspaceRoot,
                env: process.env,
                shell: true,
            });
            child.stdout.on('data', function (data) {
                context.logger.info(data.toString());
            });
            child.stderr.on('data', function (data) {
                context.logger.error(data.toString());
            });
            child.on('close', function (code) {
                if (code === 0) {
                    observer.next();
                    observer.complete();
                }
                else {
                    observer.error();
                }
            });
        }
        catch (error) {
            observer.error(error);
        }
    });
};
